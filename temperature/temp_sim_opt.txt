| Starte Kalkulation mit Parametern |
Wrote profile results to temp_sim_opt.py.lprof
Timer unit: 1e-06 s

Total time: 0.121809 s
File: temp_sim_opt.py
Function: temperatureprofile at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def temperatureprofile(c, rho, lambda_, alpha, radius, temp_boundary, temp_init, length,
    18                                                                   position=None, delta_x=0.01, delta_t=0.1, time=360.0):
    19                                               """
    20                                               Lösung der fourierischen Wärmeleitgleichung
    21                                               
    22                                               :param parameters: (float) spezifische Wärmekapazität [c] = J/kgK
    23                                               :param parameters: (float) Dichte [ρ] = kg/m3
    24                                               :param parameters: (float) Wärmeleitfähigkeit [λ] = W/mK
    25                                               :param parameters: (float) Wärmeübergangskoeffizient [α] = W/m2K
    26                                               :param parameters: (float) Radius [r] = m
    27                                               :param parameters: (float) Umgebungstemperature (Randbedingung) [Tboundry] = °C
    28                                               :param parameters: (float) Angangstemperatur (Anfangsbedingung) [Tinit] = °C
    29                                               :param length: (float) Länge des Stabes [l] = m
    30                                               :param position: (int) Beobachtungspunkt [pos] = m {Standardwert None}
    31                                               :param delta_x: (float) Schritte für die Ortsdiskretisierung [Δx] = m {Standardwert 0.01}
    32                                               :param delta_t: (float) Schritte für die Zeitdiskretisierung [Δt] = s {Standardwert 0.01}
    33                                               :param time: (float) Dauer der Simulation [t] = s {Standardwert 0.01}
    34                                               """
    35                                               
    36         2          4.0      2.0      0.0      a = lambda_/c/rho
    37                                               
    38         2          1.0      0.5      0.0      temp_boundary = temp_boundary
    39         2          1.0      0.5      0.0      temp_init = temp_init
    40                                               
    41                                               # Stabilitätskriterium nach Krebs et al. 
    42         2          1.0      0.5      0.0      if delta_t != 0.1:
    43                                                   delta_x = (2*a*delta_t)**(1/2)
    44         2          0.0      0.0      0.0      if delta_x != 0.01:
    45                                                   delta_t = (delta_x**2/a)/2
    46                                               
    47                                               # Dimensionslose Parameter
    48         2          5.0      2.5      0.0      A = lambda_ * delta_t / c / rho / delta_x**2
    49         2          0.0      0.0      0.0      B = 2 * alpha * delta_t / c / rho / radius
    50                                               
    51                                               # Anzahl der time und location steps
    52         2          2.0      1.0      0.0      time_steps = (int) (time/delta_t) + 1
    53         2          1.0      0.5      0.0      location_steps = (int) (length/delta_x) + 1
    54                                               
    55         2          8.0      4.0      0.0      blueprint = np.empty([location_steps])
    56                                               
    57         2          3.0      1.5      0.0      if isinstance(temp_init, float) or isinstance(temp_init, int):
    58         1          2.0      2.0      0.0          blueprint[0] = temp_init
    59         1         20.0     20.0      0.0          blueprint[1:] = np.full(location_steps-1, temp_boundary)
    60                                               else: 
    61         1          1.0      1.0      0.0          blueprint = temp_init
    62                                                   
    63                                               # Anfangstemperaturprofil
    64         2         20.0     10.0      0.0      temp_profile = np.empty([time_steps+1, location_steps])
    65         2          4.0      2.0      0.0      temp_profile[0] = blueprint
    66                                               
    67                                               # der Listenversatz ermöglicht die Anwendung von np.ufunc's 
    68      7204      29301.0      4.1     24.1      for time in tqdm.trange(time_steps):
    69      7202       7437.0      1.0      6.1          t1 = temp_profile[time][1:] #Listenversatz 1
    70      7202       6010.0      0.8      4.9          t2 = t1[1:] #Listenversatz 2
    71      7202       6693.0      0.9      5.5          t0 = temp_profile[time][:-2] # Längenkorrektur
    72      7202       5564.0      0.8      4.6          t1 = t1[:-1] # Längenkorrektur
    73                                                   
    74      7202      14057.0      2.0     11.5          blueprint[-1] = t0[-1] + (t0[-2]-t0[-1]) * A - B * (t0[-1]-t0[-2]) # Endtemperatur
    75      7202      44430.0      6.2     36.5          blueprint[1:-1] = t1 + (- 2*t1 + t0 + t2) * A - B * (t1-temp_boundary) # Einfügen von Anfangstemperatur und Endtemperatur
    76      7202       8242.0      1.1      6.8          temp_profile[time+1] = blueprint
    77                                               
    78                                               #Speichern des Temperaturprofils als CSV
    79                                               #np.savetxt("temp_profile.csv", temp_profile, delimiter=";")
    80                                               
    81                                               # time = find_time(temp_profile=temp_profile, position=position, delta_t=delta_t, delta_x=delta_x, length=length)
    82                                               
    83         2          2.0      1.0      0.0      return temp_profile

Total time: 0 s
File: temp_sim_opt.py
Function: find_time at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                           @profile
    86                                           def find_time(temp_profile, position, delta_t, delta_x, length, limit=45):
    87                                               """
    88                                               Ermittelt an jeder Stelle den Zeitpunkt der Grenztemperatur aus dem Temperaturprofil
    89                                               
    90                                               :params temp_profile: (numpy.ndarray) Temperaturprofil Spalten = Positionen | Reihen = Zeitpunkte  [temp_profile] = °C
    91                                               :param limit: (float) Grenztemperatur [limit] = °C {Standardwert 45}
    92                                               :params limit: (float)  Grenztemperatur [limit] = °C 
    93                                               :params position: (float) Beobachtungspunkt [position] = m   
    94                                               :params delta_t: (float) Schritte für die Zeitdiskretisierung [Δt] = s
    95                                               :params delta_x: (float) Schritte für die Ortsdiskretisierung [Δx] = m
    96                                               :params length: (float) Länge des Stabes [l] = m
    97                                               """
    98                                               
    99                                               temp_profile_T = np.transpose(temp_profile)
   100                                               time_cum_sum = np.append([0],np.cumsum(np.full(temp_profile_T[0].size-1, delta_t))) # cumsum deltat
   101                                               time_gt = [np.interp(limit, temp_profile_T[i], time_cum_sum) for i in range(len(temp_profile_T))] # Linear Interpolierte Zeit
   102                                               
   103                                               if position is not None:
   104                                                   location_cumsum =  np.resize(np.arange(0.005, length+delta_x, delta_x),len(time_gt))
   105                                                   index = int(position/delta_x)
   106                                                   if position/delta_x%1 != 0 :
   107                                                       x0 = index*delta_x
   108                                                       x1 = (index+1)*delta_x
   109                                                       f0 = temp_profile_T[index]
   110                                                       f1 = temp_profile_T[index+1]
   111                                                       temp_profile_pos = f0+(f1-f0)/(x1-x0)*(position-x0)
   112                                                   else:
   113                                                       temp_profile_pos = temp_profile_T[index]
   114                                                   time = np.interp(position, location_cumsum, time_gt)
   115                                                   print("Temperaturprofil an der Position {}: {}".format(position, temp_profile_pos))
   116                                                   print("An der Position {} m wird die Grenztemperatur nach {} s erreicht".format(position,round(time,3)))
   117                                                   return time
   118                                               else:
   119                                                   print("Zeitliste: {}".format(time_gt))
   120                                                   return time_gt

